from credentials import credentials
import json
import urllib2
from datetime import date, timedelta

# import time # TEST TIME

# konnektive API credentials
LOGIN = credentials["API_USERNAME"]
PASS = credentials["API_PASSWORD"]

"""
parseTrans([startDate, endDate])

startDate, endDate: mm/dd/yyyy string. default is yesterday

returns a list of all transactions from startDate to endDate or the error
    message generated by konnektive

This is the first thing you want to run and store in a variable or log.txt
Run this as little as you can to speed up the program
"""
def parseTrans(
    startDate=(date.today() - timedelta(1)).strftime("%m/%d/%Y"),
    endDate=(date.today() - timedelta(1)).strftime("%m/%d/%Y")):
    # startTime=time.time() # TEST TIME
    # TODO: speed this up; this is too slow: ~20-30 seconds to parse 1 day
    trans = []
    page = 1
    while True:
        requestURL = \
            ("https://api.konnektive.com/transactions/query/?startDate=" +
            startDate + "&endDate=" + endDate + "&resultsPerPage=200&page=" +
            str(page) + "&loginId="+ LOGIN +
            "&password=" + PASS)
        response = json.load(urllib2.urlopen(requestURL))
        # print str(requestURL) # TEST URL
        if response["result"] == "SUCCESS":
            trans.extend(response["message"]["data"])
        else:
            return response["message"]
            # raise ValueError(response["message"])
        # print("--- page %s: %s seconds ---" % (page, (time.time() -
        #     startTime))) # TEST TIME
        page += 1
        if len(trans) >= response["message"]["totalResults"]:
            return trans

"""
logParseTrans(trans[, fileName])

trans: List of trans to print for examination. Get it from parseTrans()
fileName: how would you like to name your log file? default: log.txt

outputs the results from parseTrans() to log.txt for examination or testing
"""
def logParseTrans(trans, fileName='log.txt'):
    with open(fileName, "w") as text_file:
        text_file.write(json.dumps(trans, indent=4, sort_keys=True))

"""
parseTransFromLog([fileName])

fileName: what is the name of the log file incl extention? default: log.txt

Returns a list of parsed transactions that got stored on log.txt for testing
The log.txt could be generated from logParseTrans()
"""
def parseTransFromLog(fileName='log.txt'):
    with open(fileName, 'r') as myfile:
        trans=json.loads(myfile.read())
    return trans

"""
getRebillSummaryByCampaign(trans[, billingCycleNumber_l, campaignName])

trans: list of trans needed to count out of. For example: if you want check
    the 1st rebill for "campaign 1" for yesterday, you'd run
    getRebillSummaryByCampaign(parseTrans(), 2, "campaign 1")
billingCycleNumber_l: list of billing cycle numbers needed to count. Will
    automatically convert int to a single-item list. Leave empty for all #
campaignName: check logParseTrans() or CRM for campaignName. Leave
    empty for all campaigns

outputs two numbers: [sucessful rebills, total rebills] within the timeframe
"""
def getRebillSummaryByCampaign(trans, billingCycleNumber_l=range(15),
    campaignName=""):
    total = 0
    success = 0
    if isinstance(billingCycleNumber_l, int):
        billingCycleNumber_l = [billingCycleNumber_l]

    for entry in trans:
        if entry["billingCycleNumber"] in billingCycleNumber_l and \
            entry["txnType"] == "SALE" and (entry["campaignName"] ==
            campaignName or campaignName == "") and entry["recycleNumber"] \
            == 0:
                total += 1
                if entry["responseType"] == "SUCCESS":
                    success += 1
    return [success, total]

"""
getRecycleSummaryByCampaign(trans[, recycleNumber, campaignName])
trans: list of trans needed to count out of. For example: if you want check
    the 1st recycle for "campaign 1" for yesterday, you'd run
    getRecycleSummaryByCampaign(parseTrans(), 1, "campaign 1")
recycleNumber_l: list of recycle numbers needed to count. Will
    automatically convert int to a single-item list. Leave empty for all #
campaignName: check logParseTrans() or CRM for campaignName. Leave
    empty for all campaigns
outputs [recycle success, recycle total]
"""
def getRecycleSummaryByCampaign(trans, recycleNumber_l=range(15),
    campaignName=""):
    total = 0
    success = 0
    if isinstance(recycleNumber_l, int):
        recycleNumber_l = [recycleNumber_l]

    for entry in trans:
        if entry["recycleNumber"] in recycleNumber_l and \
            (entry["campaignName"] == campaignName or campaignName == "") \
            and entry["txnType"] == "SALE":
            total += 1
            if entry["responseType"] == "SUCCESS":
                success += 1
    return [success, total]

"""
UNDER CONSTRUCTION
getSalesAmtByCampaign(trans[, campaignName=""])
trans: list of trans needed to count out of. For example: if you want check
    the 1st rebill for "campaign 1" for yesterday, you'd run
    rebillSummaryByCampaign(parseTrans(), "campaign 1", 2)
campaignName: check logParseTrans() or CRM for campaignName. Leave
    empty for all campaigns
outputs a float number that represents the sales amount
"""
def getSalesAmtByCampaign(trans, campaignName=""): #TODO DOESN'T MATCH CRM
    sales = 0
    for entry in trans:
        if entry["billingCycleNumber"] == 1 and entry["txnType"] == "SALE" \
            and (entry["campaignName"] == campaignName or campaignName == "") \
            and entry["responseType"] == "SUCCESS":
            sales += float(entry["totalAmount"])
    return sales

"""
UNDER CONSTRUCTION
getRefundsAmtByCampaign(trans[, campaignName=""])
trans: list of trans needed to count out of. For example: if you want check
    the 1st rebill for "campaign 1" for yesterday, you'd run
    rebillSummaryByCampaign(parseTrans(), "campaign 1", 2)
campaignName: check logParseTrans() or CRM for campaignName. Leave
    empty for all campaigns
outputs a float number that represents the refund amount
"""
def getRefundsAmtByCampaign(trans, campaignName=""): #TODO DOESN'T MATCH CRM
    refunds = 0
    for entry in trans:
        if entry["txnType"] == "REFUND" and (entry["campaignName"] ==
        campaignName or campaignName == "") and entry["responseType"] == \
        "SUCCESS":
            refunds += float(entry["totalAmount"])
    return refunds
