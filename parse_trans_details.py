from credentials import credentials
import json
import urllib2
import time

# konnektive API credentials
LOGIN = credentials["API_USERNAME"]
PASS = credentials["API_PASSWORD"]

"""
parseTrans(orderType, startDate, endDate)

orderType: SALE, RECURRING etc. Run logParseTrans() to see the types
startDate, endDate: mm/dd/yy string. default is yesterday

returns a list of all transactions from startDate to endDate or the error
    message generated by konnektive

This is the first thing you want to run and store in a variable.
Run this as little as you can to speed up the program
"""
def parseTrans(orderType="", startDate=time.strftime("%m/%d/%Y"),
    endDate=time.strftime("%m/%d/%Y")):
    trans = []
    page = 1
    while True:
        requestURL = \
            ("https://api.konnektive.com/transactions/query/?startDate=" +
            startDate + "&endDate=" + endDate + "&resultsPerPage=200&page=" +
            str(page) + "&orderType=" + orderType + "&loginId="+ LOGIN +
            "&password=" + PASS)
        response = json.load(urllib2.urlopen(requestURL))
        # print str(requestURL) # TEST URL
        # if response["result"] == "SUCCESS":
        trans.extend(response["message"]["data"])
        # else:
        #     raise ValueError(response["message"])
        page += 1
        if len(trans) >= response["message"]["totalResults"]:
            return trans

"""
getSalesSummaryByCampaign(trans, campaignName, billingCycleNumber)

trans: list of trans needed to count out of. For example: if you want check
    the 1st rebill for "campaign 1" for yesterday, you'd run
    rebillSummaryByCampaign(parseTrans(), "campaign 1", 2)
campaignName: check logParseTrans() or CRM for campaignName. Leave
    empty for all campaigns
billingCycleNumber_l: list of billing cycle numbers needed to count. Will
    automatically convert int to a single-item list. Leave empty for all #

outputs two numbers: [sucessful rebills, total rebills] within the timeframe
"""
def getSalesSummaryByCampaign(trans, campaignName="",
    billingCycleNumber_l=range(15)):
    total = 0
    success = 0
    if isinstance(billingCycleNumber_l, int):
        billingCycleNumber_l = [billingCycleNumber_l]

    for entry in trans:
        if entry["billingCycleNumber"] in billingCycleNumber_l and \
            entry["txnType"] == "SALE":
            if entry["campaignName"] == campaignName or campaignName == "":
                total += 1
                if entry["responseType"] == "SUCCESS":
                    success += 1
    return [success, total]

"""
parseTrans(trans)

trans: List of trans to print for examination.

outputs the results from parseTrans() to log.txt for examination
"""
def logParseTrans(trans):
    text_file = open("log.txt", "w")
    text_file.write(json.dumps(trans,
        indent=4, sort_keys=True))
    text_file.close()

def printEverything(campaignName="", startDate=time.strftime("%m/%d/%Y"),
    endDate=time.strftime("%m/%d/%Y")):
    a =1


# print json.dumps(parseTransJson(), indent=4, sort_keys=True)

# jsonData = response["message"]["data"]
# for item in jsonData:
#     responseText = item.get("responseText")
#     orderId = item.get("orderId")
#     print responseText
#     print orderId
# parsed = json.loads(jsonData)
# print json.dumps(jsonData, indent=4, sort_keys=True)
